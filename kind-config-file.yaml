# kind-cluster-config.yaml

apiVersion: kind.x-k8s.io/v1alpha4    # Specifies the Kind API version to use. Kind is a tool for running Kubernetes clusters locally using Docker containers.
                                      # This API version ensures compatibility with the current Kind features and configurations.

kind: Cluster                         # Declares that this is a Kind Cluster configuration file, which tells Kind how to create the cluster.
                                      # This setting defines that we are creating a Kubernetes cluster managed by Kind.

name: ibtisam                         # Name of the Kind cluster. This is an identifier for the cluster, useful when managing multiple clusters.
                                      # Choosing a unique name allows easy identification, especially when multiple clusters are in use.

nodes:                                # Defines the cluster nodes, specifying their roles and configurations.
  - role: control-plane               # Defines a node as a control-plane (master) node, responsible for managing the cluster.
    image: kindest/node:v1.32.2       # Specifies the container image for the control-plane node. Ensures all nodes run the same Kubernetes version.
    extraPortMappings:                # Optional: Maps additional ports from the host machine to the node for external access.
      - containerPort: 30000
        hostPort: 3000                # Maps this service port to port 3000 on the host, making it accessible externally.               
        protocol: TCP                 # Communication protocol used (TCP for most services).
  - role: worker                      # Defines a worker node, which runs application workloads but does not manage the cluster.
    image: kindest/node:v1.32.2       # Uses the same Kubernetes version as the control-plane nodes.

networking:                           # Configures the cluster's networking settings.
  disableDefaultCNI: false            # Determines whether to disable the default Container Network Interface (CNI). False means the default CNI (Flannel) is enabled. 
                                      # The CNI manages pod networking, allowing pods to communicate within the cluster.
  podSubnet: "10.244.0.0/16"          # Defines the subnet range for pod networking.
                                      # This range ensures that each pod gets a unique IP address.
  serviceSubnet: "10.96.0.0/12"       # Defines the subnet range for Kubernetes services.
                                      # Kubernetes services use this range to provide stable internal networking for applications.
  apiServerAddress: "127.0.0.1"       # Specifies the address the API server binds to. Here, it's bound to localhost.
                                      # This ensures that only the local machine can access the API server, enhancing security.
  apiServerPort: 6443                 # Specifies the API server port (default is 6443 for Kubernetes).
                                      # This port is crucial for managing the cluster externally using `kubectl` or other tools.
