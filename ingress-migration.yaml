apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sam
  name: sam
  namespace: default
spec:
  selector:
    matchLabels:
      app: sam
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sam
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: sam
  name: sam
  namespace: default
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: sam
  type: ClusterIP

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sam
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - host: sam.com
    http:
      paths:
      - backend:
          service:
            name: sam            # Must share the same ns with ingress resource itself
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - sam.com
    secretName: sam              # Must share the same ns with ingress resource itself

---

# controlplane ~ ➜  k get svc -n ingress-nginx ingress-nginx-controller
# NAME                       TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
# ingress-nginx-controller   NodePort   172.20.197.184   <none>        80:30813/TCP,443:31568/TCP   79m

# curl -k --resolve sam.com:31568:192.168.102.154 https://sam.com:31568/
---

apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: sam
  namespace: nginx-gateway
spec:
  gatewayClassName: nginx
  listeners:
  - allowedRoutes:
      namespaces:
        from: All                  # Default = Same, if HTTPRoute doesn't share same with Gateway, choose 'All'
    hostname: sam.com
    name: https
    port: 443                      # Use when tls is integrated.
    protocol: HTTPS
    tls:
      certificateRefs:
      - group: ""
        kind: Secret
        name: sam                  # Must share the same ns with gateway resource itself
      mode: Terminate
status:
  conditions:
  - lastTransitionTime: "2025-10-17T18:40:57Z"
    message: Gateway is accepted                  # by the Gateway controller. It indicates the controller recognized your Gateway.
    observedGeneration: 1
    reason: Accepted
    status: "True"
    type: Accepted
  - lastTransitionTime: "2025-10-17T18:40:57Z"
    message: Gateway is programmed                # controller has actually configured (or “programmed”) the underlying data plane according to your Gateway spec. 
    observedGeneration: 1                         # The desired listener and routing infrastructure is active.
    reason: Programmed
    status: "True"
    type: Programmed
  listeners:
  - attachedRoutes: 1                            # Means this listener has one route (HTTPRoute) attached to it
    conditions:
    - lastTransitionTime: "2025-10-17T18:40:57Z"
      message: Listener is accepted              # The listener (port, protocol, TLS, hostname) has been accepted by the controller. It is valid. 
      observedGeneration: 1
      reason: Accepted
      status: "True"
      type: Accepted
    - lastTransitionTime: "2025-10-17T18:40:57Z"
      message: Listener is programmed            # The listener is configured in the data plane (i.e. listening on correct port, TLS termination, hostname, etc.).
      observedGeneration: 1
      reason: Programmed
      status: "True"
      type: Programmed
    - lastTransitionTime: "2025-10-17T18:40:57Z"
      message: All references are resolved      # Means all references within that listener (e.g. the cert secret ref) are resolved and valid. The Gateway knows the secret, can load it.
      observedGeneration: 1
      reason: ResolvedRefs
      status: "True"
      type: ResolvedRefs
    - lastTransitionTime: "2025-10-17T18:40:57Z"
      message: No conflicts                    # This would indicate if there were conflicts (e.g. two listeners with same port/hostname causing ambiguity).
      observedGeneration: 1
      reason: NoConflicts
      status: "False"                          # status: False means there is no conflict, i.e. everything is unique and okay. 
      type: Conflicted
    name: https
    supportedKinds:
    - group: gateway.networking.k8s.io
      kind: HTTPRoute
    - group: gateway.networking.k8s.io
      kind: GRPCRoute

---

apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: sam
  namespace: default
spec:
  hostnames:
  - sam.com
  parentRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: sam
    namespace: nginx-gateway
    sectionName: https
  rules:
  - backendRefs:
    - group: ""
      kind: Service
      name: sam
      port: 80
      weight: 1
    matches:
    - path:
        type: PathPrefix
        value: /
status:
  parents:
  - conditions:
    - lastTransitionTime: "2025-10-17T18:40:57Z"
      message: The route is accepted
      observedGeneration: 1
      reason: Accepted
      status: "True"
      type: Accepted
    - lastTransitionTime: "2025-10-17T18:40:57Z"
      message: All references are resolved
      observedGeneration: 1
      reason: ResolvedRefs
      status: "True"
      type: ResolvedRefs
    controllerName: gateway.nginx.org/nginx-gateway-controller
    parentRef:
      group: gateway.networking.k8s.io
      kind: Gateway
      name: sam
      namespace: nginx-gateway
      sectionName: https

---

# controlplane ~ ➜  k get svc -n nginx-gateway nginx-gateway 
# NAME            TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
# nginx-gateway   NodePort   172.20.39.206   <none>        80:31498/TCP,443:32036/TCP   62m

# curl -k --resolve sam.com:32036:192.168.102.154 https://sam.com:32036/
